# Add deno completions to search path
# if [[ ":$FPATH:" != *":/Users/gema/.zsh/completions:"* ]]; then export FPATH="/Users/gema/.zsh/completions:$FPATH"; fi
# CodeWhisperer pre block. Keep at the top of this file.
# [[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh"
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  #source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

source "$HOME/.secure.sh"
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
set -o vi
bindkey -v
export KEYTIMEOUT=1

# turn off tmux
# if [ "$TMUX" = "" ]; then tmux; fi

# Path to your oh-my-zsh installation.
# source ~/.zsh-powerline.sh
# export ZSH="/Users/gema/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
# theme list: agnoster, spaceship
# ZSH_THEME="mortalscumbag"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  zsh-autosuggestions
)

# source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ws="windsurf"

# allow locally installed npm binaries to be executed;
# added by `npm i -g add-local-binaries-to-path`
source ~/.zsh_dev_vars
# ===========
# PATH export
# ===========
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:$HOME/goweb/go/bin"
export PATH="$PATH:./node_modules/.bin"
export PATH=~/.npm-global/bin:$PATH
export PATH=~/.local/bin:$PATH
# export PATH="$PATH:$HOME/.flutter-cli/bin"
export PATH="$PATH:/usr/local/lib/flutter/bin"
# Add .NET Core SDK tools
export PATH="$PATH:/Users/gema/.dotnet/tools"
export FZF_DEFAULT_COMMAND='fd --type file'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export EDITOR='nvim'
# solana
# export PATH="/Users/gema/solana"/bin:"$PATH"
export PATH="/Users/gema/0/tools/solana"/bin:"$PATH"
# ===========
# GOPATH 
# ===========
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

alias rtfi="npm install three @types/three @react-three/fiber @react-three/drei @react-three/postprocessing"

function weather() {
  curl wttr.in/$1
}

function encrypt() {
  gpg -c --no-symkey-cache --cipher-algo AES256 $1
}

function arm_mode(){
  arch -arm64 zsh
}

function intel_mode(){
  arch -x86_64 zsh
}

function workon() {
    cd $HOME/projects/$1
}

function codeon() {
  cd $HOME/0/$1
}

function sidework() {
    cd $HOME/1/sidework/$1
}

function gotoa() {
    cd $HOME/A/$1
}

function mcd() {
    mkdir $1 && cd $1
}

function checkport() {
    lsof -i tcp:$1
}

function killpid() {
    kill -9 $1
}

function rem() {
    find . -name "$1" -maxdepth 1 -exec mv {} ~/.Trash \;
}

function touch-safe {
    for f in "$@"; do
      [ -d $f:h ] || mkdir -p $f:h && command touch $f
    done
}

function dockerdb() {
docker run --name app-postgres \
             --env POSTGRES_USER=test \
             --env POSTGRES_PASSWORD=test \
             --publish 127.0.0.1:5432:5432 \
             --detach \
             --restart unless-stopped \
             postgres:13
}

function daily200() {
    git checkout "daily2.0.0" && \
    git reset --hard "origin/versions/2.0.0" && \
    git commit --allow-empty -m $1 && \
    git push origin "daily2.0.0" -f
}

function daily210() {
    git checkout "daily2.1.0" && \
    git reset --hard "origin/versions/2.1.0" && \
    git commit --allow-empty -m $1 && \
    #git push origin "daily2.1.0" -f
}

alias touch=touch-safe
alias kubectl="minikube kubectl --"

# FOR PRE-RELEASE NVIM
# alias v='~/.nvim-pre/bin/nvim'
# alias vf='v -o `fzf`'

alias v='nvim'
alias vf='nvim -o `fzf`'

alias vim='nvim'
alias vimf='nvim -o `fzf`'

bindkey -v
alias nv='nvim'
alias cr='cursor'
alias nvf='nvim -o `fzf`'
alias nvimf='nvim -o `fzf`'
alias vimf='vim -o `fzf`'
alias cfd='cd $(dirname `fzf`)'
alias nvpure='nvim -u ~/.config/nvim/empty.vim'
alias lg='lazygit'
alias lst='ls -R | grep ":$" | sed -e '"'"'s/:$//'"'"' -e '"'"'s/[^-][^\/]*\//--/g'"'"' -e '"'"'s/^/   /'"'"' -e '"'"'s/-/|/'"'"

alias purge_node_modules='find . -name "node_modules" -type d  -prune -exec rm -rf "{}" \;'

function zle-line-init zle-keymap-select {
    # RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
    # RPS2=$RPS1
    zle reset-prompt
}

# for tmux change pane name
function settitle() {
      export PS1="\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$ "
      echo -ne "\e]0;$1\a"
}

zle -N zle-line-init
zle -N zle-keymap-select

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
export PATH="/usr/local/opt/openssl/bin:$PATH"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/gema/.sdkman"
[[ -s "/Users/gema/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/gema/.sdkman/bin/sdkman-init.sh"

# NVM CONFIG
# -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" --no-use # This loads nvm
alias load_nvm="[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" --no-use"
# export NVM_DIR=${HOME}/.nvm
# export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# KITTY
# autoload -Uz compinit
# compinit
# Completion for kitty
# kitty + complete setup zsh | source /dev/stdin
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# export PATH=/usr/local/share/kotlin-native-macos-1.3.72/bin:$PATH

[ -f "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env" ] && source "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env"
# if [ -e /Users/gema/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/gema/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
alias ibrew='arch -x86_64 /usr/local/bin/brew'
alias mbrew='arch -arm64e /opt/homebrew/bin/brew'

export PATH=/opt/homebrew/bin:$PATH

# homebrew m1
eval "$(/opt/homebrew/bin/brew shellenv)"

export PATH="/usr/local/opt/libpq/bin:$PATH"

# fnm
eval "`fnm env`"
export PATH=/Users/gema/.fnm:$PATH

# NOTE: where to put apps? maybe /usr/local/lib or share ?
export PATH=/Users/gema/bin:$PATH

# I'll be doing another one for Linux, but this one will give you 
# a pop up notification and sound alert (using the built-in sounds for macOS)

# Requires https://github.com/caarlos0/timer to be installed

# Mac setup for pomo
alias work="timer 40m && terminal-notifier -message 'Pomodoro'\
        -title 'Work Timer is up! Take a Break ðŸ˜Š'\
        -appIcon '~/Pictures/machu.jpg'\
        -sound Crystal"
        
alias rest="timer 10m && terminal-notifier -message 'Pomodoro'\
        -title 'Break is over! Get back to work ðŸ˜¬'\
        -appIcon '~/Pictures/machu.jpg'\
        -sound Crystal"


# bun completions
[ -s "/Users/gema/.bun/_bun" ] && source "/Users/gema/.bun/_bun"

# Bun
export BUN_INSTALL="/Users/gema/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="/Users/gema/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/gema/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/gema/opt/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/gema/opt/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/gema/opt/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
#source ~/powerlevel10k/powerlevel10k.zsh-theme
# export POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
export YARN_IGNORE_NODE=1
eval "$(starship init zsh)"


test -d "$HOME/.tea" && source <("$HOME/.tea/tea.xyz/v*/bin/tea" --magic=zsh --silent)

# export VOLTA_HOME="$HOME/.volta"
# export PATH="$VOLTA_HOME/bin:$PATH"

# fnm
export PATH="/Users/gema/.fnm:$PATH"
eval "`fnm env`"


[[ -f "$HOME/fig-export/dotfiles/dotfile.zsh" ]] && builtin source "$HOME/fig-export/dotfiles/dotfile.zsh"

# CodeWhisperer post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh"

eval "$(zoxide init zsh)"
. "/Users/gema/.deno/env"
# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# Added by Windsurf
export PATH="/Users/gema/.codeium/windsurf/bin:$PATH"

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /Users/gema/.dart-cli-completion/zsh-config.zsh ]] && . /Users/gema/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]
#



# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/gema/.lmstudio/bin"
