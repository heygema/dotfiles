" =========
" Gema Anggada's VIM SETUP 
" =========
" Sat Nov 28 09:49:50 2020

" =========
" NOTE: External Dependencies
" Ack, fd, VimPlug
" =========

call plug#begin('~/.vim/plugged')

" appearances
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'machakann/vim-highlightedyank'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'

"syntaxes
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'jparise/vim-graphql'
Plug 'neovimhaskell/haskell-vim'
Plug 'mxw/vim-jsx'

" tools
Plug 'mattn/emmet-vim'
Plug 'rescript-lang/vim-rescript'
Plug 'pantharshit00/vim-prisma'
Plug 'Shougo/unite.vim'
Plug 'rhysd/git-messenger.vim'
Plug 'francoiscabrol/ranger.vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'wakatime/vim-wakatime'
" fzf just for relative path
Plug '/usr/local/opt/fzf'
Plug 'chmanie/fzf.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
" NOTE: bclose to fix ranger-vim not being closed after used
Plug 'rbgrouleff/bclose.vim'

call plug#end()

source ~/.vimextend.vim

set nocompatible
set nocp                    " 'compatible' is not set
filetype plugin on          " plugins are enabled
" filetype off 
syntax enable

" THEMING
" If you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

set cursorline
colorscheme onedark
" let g:gruvbox_transparent_bg = 1
" colorscheme peaksea

" =========
" GENERAL SETTINGS
" =========

" Move command
" You can move a line, or a block of lines, with the :m command. Examples:
" doesn't seem to work
" nnoremap <A-j> :m .+1<CR>==
" nnoremap <A-k> :m .-2<CR>==
" inoremap <A-j> <Esc>:m .+1<CR>==gi
" inoremap <A-k> <Esc>:m .-2<CR>==gi
" vnoremap <A-j> :m '>+1<CR>gv=gv
" vnoremap <A-k> :m '<-2<CR>gv=gv
highlight Comment cterm=italic

" filetype plugin indent on
set hlsearch
set incsearch           " do incremental searching
set showmatch           " jump to matches when entering regexp
set ignorecase          " ignore case when searching
set smartcase " no ignorecase if Uppercase char present
set autoread " autoread file

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
nmap <space> za
command! W w
command! Q q
command! WipeReg for i in range(34,122) | silent! call setreg(nr2char(i), []) | endfor

" Map to resize split panes
map <silent> ˙ <C-w><
map <silent> ˚ <C-W>-
map <silent> ∆ <C-W>+
map <silent> ¬ <C-w>>

" clear searches
noremap <silent> <Leader>k :let @/=""<cr>

" custom commenting
" autocmd FileType *jsx,*js,*ts,*tsx,typescript map <silent> <Leader>c :s/^/\/\/ <cr> <bar> :noh<cr>
" autocmd FileType *jsx,*js,*ts,*tsx,typescript map <silent> <Leader>x :s/^/\/* <cr> <bar> :s/$/ *\/<cr> <bar> :noh<cr>

" Numbering
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" BUFFERS
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

nmap <silent> gk :bnext<cr>
nmap <silent> gj :bprevious<cr>
nmap <silent> gcl :BD<cr>
nmap <silent> <leader>b :enew<cr>
" Close the current buffer and move to the previous one
nmap <silent> gq :bp <BAR> bd #<CR>
" Show all open buffers and their status
nmap <leader>bl :ls<CR>

set encoding=UTF-8
set autoindent
" set smartindent
set mouse=c
set foldenable
set backspace=2
" show existing tab with 4 spaces width
" set tabstop=2
" when indenting with '>', use 4 spaces width
set shiftwidth=2
" On pressing tab, insert 4 spaces
set expandtab

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Go to Merge Conflict by Git
map <silent> <Leader>q /^\(<\{7\}\\|>\{7\}\\|=\{7\}\\|\|\{7\}\)\( \\|$\)<cr>

" =========
" EXPORTED FROM WINCENT
" ========

set scrolloff=3                       " start scrolling 3 lines before edge of viewport
set shortmess+=A                      " ignore annoying swapfile messages
set shortmess+=I                      " no splash screen
set shortmess+=O                      " file-read message overwrites previous
set shortmess+=T                      " truncate non-file messages in middle
set shortmess+=W                      " don't echo "[w]"/"[written]" when writing
set shortmess+=a                      " use abbreviations in messages eg. `[RO]` instead of `[readonly]`
set shortmess+=o                      " overwrite file-written messages
set shortmess+=t                      " truncate file messages at start

" regarding swap files
if exists('$SUDO_USER')
  set noswapfile                      " don't create root-owned files
else
  set directory=~/local/.vim/tmp/swap//
  set directory+=~/.vim/tmp/swap//    " keep swap files out of the way
  set directory=$HOME/.vim/tmp//
endif

" folding
if has('folding')
  if has('windows')
    let &fillchars='vert: '           " less cluttered vertical window separators
  endif
  set foldmethod=indent               " not as cool as syntax, but faster
  set foldlevelstart=99               " start unfolded
endif

" never trust vim with syntax enable
" if !exists("g:syntax_on")
    " syntax enable
" endif

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
set updatetime=300
set background=dark    " Setting dark mode

if filereadable($HOME."/.coc-vimrc")
    source ${HOME}/.vim/.coc-vimrc
endif

" coc-graphql
" au BufNewFile,BufRead *.prisma setfiletype graphql
